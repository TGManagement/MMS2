{
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=TGManagementLLC.db.10588074.932.hostedresource.net; Initial Catalog=TGManagementLLC; User ID=TGManagementLLC; Password='M13oneY!Madne55'; "
  },


  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "AllowedHosts": "*",
  //NEED TO DO ~~~~~~~~~~~~~~~~~~~~
  //  After successfully completing payments and buying, need to convert everything to API on Thepaymentbuilder
  //1. Need to add shipping at ***SHIPPING HERE but I think it really needs to be calculated when they enter their card. I will have to simplify the view cart to say "AND + shipping" ?
  //2. Need to change UpdatedBy to UpdatedOn for Carts. This way I can check cart based on UpdatedOn instead of CreatedOn date. Also need to update it to DateTime2
  //3. Check ShoppingCart.Cart.StatusId = 1; to make sure status id is right after adding item to cart. CartRepository

  //4. NEED TO ADD url to cart Item so we can pull the value up in ViewCart Page
  //MAYBE we can do a foreign key so that it includes something to the actual Replica or Merch and we can just list that

  //"app.UseStaticFiles(new" "StaticFileOptions()",
  //{
  //  //FileProvider = new PhysicalFileProvider(
  //  //     Path.Combine(Directory.GetCurrentDirectory(), @"HtmlTemplate")),
  //  //RequestPath = new PathString("/HtmlTemplate")
  //}
  //");",


  //DONE Need to create CART trigger that will delete all CartItems and ALSO a cartItem trigger for history table


  //**************************************************************************************************
  //I think below is supposed to be used when you need a little extra besides the basic info (size name,pictureURL) from the database
  //This could be different by just creating the replica and then use that info to pull from context
  //var Replica = _context.Replica.Where(x=>x.MerchId == Id).Single();
  //Replica.SizeName = _context.Size.Select(x=>x.SizeName).Where(x=>x.SizeId = Replica.SizeId);
  //But this won't work because just a replica isn't enough because it doesn't contain sizeName in the Database table
  //public async Task<IActionResult> Index(int Id)
  //     {
  //             var Replica = (from r in _context.Replica
  //                            join s in _context.Size on r.SizeId equals s.SizeId
  //                            join ma in _context.Material on r.MaterialId equals ma.MaterialId
  //                            join m in _context.Merch on r.MerchId equals m.MerchId
  //                            where r.MerchId == Id && m.OwnerId == TheOwner.OwnerId //TGMGMTLLC Template
  //                            select new ReplicaIndexListVm()
  //                            {
  //                                MaterialName = ma.Name,
  //                                SizeName = s.Name,
  //                                Replica = r,
  //                                PictureUrl = m.PictureUrl

  //                            });
  //         var MerchInfo= _context.Merch.Where(x => x.MerchId == Id).Single();
  //         ViewData["PictureUrl"] = MerchInfo.PictureUrl;
  //         ViewData["MerchId"] = MerchInfo.MerchId.ToString();
  //         return View(await Replica.ToListAsync());
  //     }
  //**************************************************************************************************





}//cd C:\Users\Greesemonkey3\source\repos\MMS\MMSystem
//dotnet ef dbcontext scaffold "Data Source=TGManagementLLC.db.10588074.932.hostedresource.net; Initial Catalog=TGManagementLLC; User ID=TGManagementLLC; Password='M13oneY!Madne55';" Microsoft.EntityFrameworkCore.SqlServer -o Models -f